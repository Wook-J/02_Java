package edu.kh.oop.cls.run;

import edu.kh.oop.cls.model.service.ClsService;

public class ClsRun {

	public static void main(String[] args) {

		ClsService service = new ClsService();
							// 기본생성자를 호출하고 있는거임!
		// ClsService 클래스에 기본생성자를 작성한 적 없지만
		// 기본생성자를 호출하고 객체도 잘만들어서 사용중! -> 어떻게 가능???
		// -> 컴파일러가 코드를 번역할 때 클래스 내부에 생성자가 하나도 없다면
		//    자동으로 기본생성자를 추가해 줌(우리 눈엔 안보임!)
		
//		service.ex2();
//		service.ex3();
		service.ex4();
	}

}

/*
 * 현실 객체 : 자신의 속성(값, data)과 기능(동작,행동)이 다른 것들과 구분되어 식별 가능한 것
 * 객체 지향 언어 : 독립되고 구분되는 각각의 객체 간 상호작용으로 발생하는 모든 사건들을 만들어낸 것
 * 자바 객체 : 클래스에 정의된 내용대로 "new 연산자"를 통해 메모리 영역에 생성된 것
 * class : 객체의 특성(속성, 기능)에 대한 정의를 한 것(각각의 파일로 이루어짐)
			추상화(abstraction)와 캡슐화(encapsulation)가 적용되어야 함!
 * new 연산자 : Heap 메모리 영역에 공간을 생성하고 주소를 배정하는 것
 * 추상화 : 작성하려는 클래스의 속성과 기능 중 프로그램에서 필요한 공통점을 추출하고, 불필요한 부분을 제거하는 과정
 * 캡슐화 : 추상화를 통해 정리된 속성과 기능을 하나로 묶어 관리하는 기법
	- 속성의 직접접근 제한을 원칙으로 하여 외부에서 직접접인 접근을 막고,
	- 간접적으로 속성에 접근할 수 있는 메서드를 클래스 내부에 작성하는 방법
 * 캡슐화 원칙
	- 멤버변수에 대한 접근권한은 private 으로
	- 멤버변수에 대한 연산처리를 목적으로 하는 멤버메서드는 클래스 내부에 작성
	  외부에서 접근이 가능하도록 멤버메서드는 public 으로
 * 메서드/기능의 '정의'란 : 동작
 * 메서드의 '호출' 이란 : 메서드를 구현하기 위해 부르는것
 * return : 해당 메서드를 종료하고, 자신을 호출한 곳으로 return 이후의 값을 반환
 * public String ex1() {
	    return "Hi";
	}
	
	위 메서드 상세히 해석 : ex1()을 호출한 곳에서 자료형String으로 "Hi"라는 값을 반환
 * */

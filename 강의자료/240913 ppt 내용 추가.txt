Wrapper 클래스 8가지(기본 자료형을 객체화 시키는 클래스) 11_컬렉션(Collection) ppt 5쪽
첫글자 대문자로!
Boolean, Character, Byte, Short, Integer, Long, Float, Double

인터페이스 : 공통된 메서드명을 제공하여 규약을 만듦

컬렉션의 주요 인터페이스의 특징 굉장히 중요!!!! 11_컬렉션(Collection) ppt 6쪽
0. 공통 특징 : 크기를 자유롭게 늘리고 줄이고 가능

1. List(나열) : 기본적으로 배열 모양을 가짐
  - 순서 유지가 가능
  - 중복 저장 가능 (인덱스 번호로 구분 가능)

2. Set(집합) : 주머니 모양의 집합
  - 순서 유지하지 않고 저장
  - 중복 저장 안됨 (중복데이터 들어오면 제거함)

3. Map(지도) - 좌표를 찍으면 주소가 나옴
(JS에서는 {k : v, k : v, k : v ...}의 형태로 만듦)
  - (key - value) 형태로 저장
  - value는 중복 저장 가능 하나, key는 중복 불가능

List, Set은 공통 인터페이스(Collection)여서 메서드명이 거의 일치
add, contains, size, isEmpty, clear, remove 등(set, get은 순서있는 List에서만 사용)
Map은 다른 인터페이스여서 메서드명이 앞의 2개와 다를 수 있음(겹치는 것도 있음!)
put, contatinsKey, containsValue, get, keySet, isEmpty, size, clear, remove

동기화 관련 : 11_컬렉션(Collection) ppt 10쪽
  - 동기 : 앞선 일이 끝나면 다음 일을 시작하는 경우
  - 비동기 : 앞선 일이 끝나기 전에 다음 일을 시작하는 경우

  - 스레드 : 일꾼??
  - 자바 : 멀티스레드(여러 스레드를 만들어 사용 가능) 지원한다고 함
  - 지금까지 싱글스레드(main() -> 메인스레드)만 이용했음
  - Thread 클래스를 상속받아 멀티스레드를 만들수는 있음(아직은 쓸일 거의없음)
  - 멀티스레드가 필요한 경우 : 여러 작업을 동시에 처리하고 싶을 때
    ex1) 대용량 데이터 처리
    ex2) UI가 응답성을 유지하면서 백그라운드에서 작업을 실행하고 싶을때
          (파일 다운로드 중에서도 사용자가 UI를 조작할 수 있게끔 할 때)

  - ArrayList : 동기화를 제공하지 않음!!
    -> 만약 ArrayList를 멀티스레드 환경에서 사용하면 문제가 생길 수 있음
  - Vector : ArrayList와 동등하지만 동기화를 제공함(but 성능이 좋지 않음)

  - ArrayList : 검색하는 경우에 주로 사용
  - LinkedList : 삽입, 수정, 삭제가 빈번하는 곳에서 주로 사용